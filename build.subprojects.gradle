buildscript {
    repositories {
        mavenCentral()
        jcenter()

        maven {
            name = "Forge"
            url = "https://files.minecraftforge.net/maven"
        }

        maven {
            name = "Sponge"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath project.forgegradle
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

final boolean IS_PROJECT_COMMON = (project.name == PROJECT_COMMON_NAME)

final boolean IS_FORGEGRADLE_2_X = (project.forgegradle as String).contains(":2.")
final boolean IS_FORGEGRADLE_3_X = (project.forgegradle as String).contains(":3.")

if (!IS_PROJECT_COMMON)
{
    evaluationDependsOn(":${ PROJECT_COMMON_NAME }")
}

final File RUN_CLIENT_MOD_DIR = new File(project.buildDir, "runClientMod")

apply plugin: project.forgegradle_plugin
apply plugin: "org.spongepowered.mixin"

configurations {
    embed
    embedOnly

    embedOnly.extendsFrom(embed)

    compileClasspath.extendsFrom(embedOnly)
    runtimeClasspath.extendsFrom(embed)
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        name = "Forge"
        url = "https://files.minecraftforge.net/maven"
    }

    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    if (IS_FORGEGRADLE_3_X)
    {
        minecraft("net.minecraftforge:forge:${ project.version_minecraft }-${ project.version_forge }") {
            exclude module: "forge"
        }
    }

    if (!IS_PROJECT_COMMON)
    {
        embedOnly(project(":TorvaldsInput-common")) {
            exclude module: "forge"
        }
    }

//    embed("org.spongepowered:mixin:0.8") {
//        exclude module: "guava"
//        exclude module: "commons-io"
//        exclude module: "gson"
//    }

    if (IS_PROJECT_COMMON)
    {
        embed("org.spongepowered:mixin:0.8") {
            exclude module: "guava"
            exclude module: "commons-io"
            exclude module: "gson"
        }
    }

//    configurations.compileClasspath.extendsFrom(configurations.embed)
}

minecraft {
    if (IS_FORGEGRADLE_2_X)
    {
        version = "${ project.version_minecraft }-${ project.version_forge }"
    }

    if (project.isProperty("version_mappings"))
    {
        mappings = project.version_mappings
    }

    if (IS_FORGEGRADLE_3_X)
    {
        if (!IS_PROJECT_COMMON)
        {
            runs {
                client {
                    singleInstance(true)

                    if (project.isProperty("run_location"))
                    {
                        workingDirectory project.file("run")
                    }
                    else
                    {
                        workingDirectory project.file("run")
                    }

                    // Recommended logging data for a userdev environment
                    property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

                    // Recommended logging level for the console
                    property "forge.logging.console.level", "debug"

                    jvmArgs += "-Dfml.coreMods.load=net.jasonhk.minecraft.mods.torvaldsinput.LoadingPlugin"

                    mods {
                        torvaldsinput {
                            sources(project(":${ PROJECT_COMMON_NAME }").sourceSets.main,
                                    sourceSets.main)
                        }
                    }
                }
            }
        }
    }
    else
    {
        if (project.isProperty("run_location"))
        {
            runDir "run"
        }
    }
}

mixin {
    add sourceSets.main, "mixins.torvaldsinput.refmap.json"
}

tasks.shadowJar.enabled = false

//shadowJar {
//    dependencies {
//        include(dependency("org.spongepowered:mixin:0.8"))
//
//        if (!IS_PROJECT_COMMON)
//        {
//            include(project(":TorvaldsInput-common"))
//        }
//    }
//}
//tasks.assemble.dependsOn(tasks.shadowJar)

compileJava {
    manifest {
        attributes([
                "TweakClass": "net.jasonhk.minecraft.mods.torvaldsinput.tweaker.TorvaldsInputTweaker"
        ])
    }
}

processResources {
    inputs.property("mod_version", project.version)

    filesMatching("mcmod.info") {
        expand "mod_version": project.version
    }
}

classes {
    finalizedBy("copyRunClientMod")
}

task copyRunClientMod(type: Copy, group: "fg_runs") {
    doFirst { RUN_CLIENT_MOD_DIR.mkdirs() }

    if (!IS_PROJECT_COMMON)
    {
        (minecraft.runs.client.mods.torvaldsinput.sources as List<SourceSet>)*.each { source ->
            def output = source.output
            output.classesDirs.each { dir -> from(dir) }
            from(output.getResourcesDir())
        }
    }

    into(RUN_CLIENT_MOD_DIR)
}

jar {
    // dependsOn "shadowJar"

    from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

//    manifest {
//        attributes([
//                "TweakClass": "net.jasonhk.minecraft.mods.torvaldsinput.tweaker.TorvaldsInputTweaker"
//        ])
//    }
}

if (!IS_PROJECT_COMMON)
{
//    task copyRunClientMod(type: Copy) {
//        doFirst { RUN_CLIENT_MOD_DIR.mkdirs() }
//
//        [
//                sourceSets.main,
//                (project(":${ PROJECT_COMMON_NAME }").sourceSets as SourceSetContainer).main
//        ]*.getOutput().each {
//            from(it.getClassesDirs(), it.getResourcesDir())
//        }
//    }

//    tasks.prepareRunClient.dependsOn("copyRunClientMod")
//    prepareRunClient {
//        dependsOn(tasks.copyRunClientMod)
//    }
}

if (!IS_PROJECT_COMMON)
{
    afterEvaluate {
        prepareRuns {
            doLast {
                tasks.prepareRunClient {
//                    dependsOn(tasks.copyRunClientMod)
//                    minecraft.runs.client.mods.torvaldsinput.

                    sourceSets.main.java.setOutputDir(RUN_CLIENT_MOD_DIR)
                    sourceSets.main.resources.setOutputDir(RUN_CLIENT_MOD_DIR)

                    minecraft.runs.client.mods.torvaldsinput.sources = new ArrayList<>()
                    minecraft.runs.client.mods.torvaldsinput.sources(sourceSets.main)

                    doLast {
                        tasks.runClient {
                            println(classpath.toList())
                            println(environment.toString())
                        }
                    }
                }
            }
        }
    }
}

defaultTasks("build")
